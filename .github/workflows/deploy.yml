name: CI/CD to Server

on:
  push:
    branches: [ master, dev, stage ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ok-service-backend

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master' || github.ref_name == 'dev' || github.ref_name == 'stage'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build test image & run tests
        run: |
          docker buildx build \
            --target test \
            --cache-from=type=registry,ref=${{ env.IMAGE_NAME }}:buildcache \
            --cache-to=type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max \
            --load \
            -t ok-service-backend-test .

          docker run \
            --rm \
            --env-file .env.test \
            ok-service-backend-test \
            pytest --maxfail=3 --disable-warnings

      - name: Build and Push prod image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: prod
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max



  deploy:
    runs-on: ubuntu-latest
    needs: build-test-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ github.ref_name == 'master' && secrets.SSH_PRIVATE_KEY_MASTER || github.ref_name == 'dev' && secrets.SSH_PRIVATE_KEY_DEV || secrets.SSH_PRIVATE_KEY_STAGE }}

      - name: Set env vars per branch
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-backend" >> $GITHUB_ENV
            echo "SERVER_IP=${{ secrets.SERVER_IP_MASTER }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SSH_USER_MASTER }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-backend-dev" >> $GITHUB_ENV
            echo "SERVER_IP=${{ secrets.SERVER_IP_DEV }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SSH_USER_DEV }}" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=apps/ok-service-backend-stage" >> $GITHUB_ENV
            echo "SERVER_IP=${{ secrets.SERVER_IP_STAGE }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SSH_USER_STAGE }}" >> $GITHUB_ENV
          fi
          echo "DEPLOY_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy to server (pull + update env)
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
            set -e
            cd $DEPLOY_PATH
            git pull origin ${GITHUB_REF##*/}
            
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ok-service-backend:${{ github.sha }}

            if [ ! -f .env ]; then touch .env; fi
            grep -q "^TAG=" .env && sed -i "s/^TAG=.*/TAG=${{ github.sha }}/" .env || echo "TAG=${{ github.sha }}" >> .env
          EOF

      - name: Run Alembic migrations (isolated)
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
            set -e
            cd $DEPLOY_PATH
            TAG=$(grep ^TAG .env | cut -d '=' -f2)
            docker run --rm \
              -v $(pwd):/app \
              -v $(pwd)/.env:/app/.env \
              -e PYTHONPATH=/app \
              --network host \
              ${{ secrets.DOCKERHUB_USERNAME }}/ok-service-backend:$TAG alembic upgrade head
          EOF

      - name: Restart backend container (no orphan removal)
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP << 'EOF'
            set -e
            cd $DEPLOY_PATH
            docker compose -f docker-compose.app.yaml up -d --force-recreate web
            docker image prune -f > /dev/null
            EOF





  notify:
    name: üì¨ Telegram Notify
    runs-on: ubuntu-latest
    needs: [build-test-push, deploy]
    if: always()
    steps:
      - name: üì¨ Telegram Notification
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          REF_NAME="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          AUTHOR="${{ github.event.head_commit.author.name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          DEPLOY_STATUS="${{ needs.deploy.result }}"

          if [ "$DEPLOY_STATUS" != "success" ]; then
            STATUS="üõë *–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è*"
            EXTRA_LINK="\n\n[üîç –û—Ç–∫—Ä—ã—Ç—å GitHub Actions]($RUN_URL)"
          else
            STATUS="‚úÖ –î–µ–ø–ª–æ–π *—É—Å–ø–µ—à–µ–Ω*"
            EXTRA_LINK=""
          fi

          CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"

          TEXT="${STATUS}

          üì¶ *–í–µ—Ç–∫–∞:* \`$REF_NAME\`
          üîñ *–¢–µ–≥:* \`$SHA\`
          üë§ *–ê–≤—Ç–æ—Ä –¥–µ–ø–ª–æ—è:* [$AUTHOR](https://github.com/$AUTHOR)
          üìù *–ö–æ–º–º–∏—Ç:* $COMMIT_MESSAGE${EXTRA_LINK}"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="$CHAT_ID" \
            -d parse_mode=Markdown \
            -d "text=$TEXT"