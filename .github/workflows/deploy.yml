name: CI/CD to Server

on:
  push:
    branches: [ master, dev, stage ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ok-service-backend

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master' || github.ref_name == 'dev' || github.ref_name == 'stage'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:${{ github.sha }} .

      - name: Create fake VAPID keys
        run: |
          echo "${{ secrets.FAKE_VAPID_PUBLIC }}" > vapid_public_key.pem
          echo "${{ secrets.FAKE_VAPID_PRIVATE }}" > vapid_private_key.pem

      - name: Run Tests inside Docker
        run: |
          docker run --rm \
            --env-file .env.test \
            -v ${{ github.workspace }}/vapid_private_key.pem:/app/vapid_private_key.pem \
            -v ${{ github.workspace }}/vapid_public_key.pem:/app/vapid_public_key.pem \
            $IMAGE_NAME:${{ github.sha }} \
            pytest --maxfail=3 --disable-warnings

      - name: Push Image
        run: docker push $IMAGE_NAME:${{ github.sha }}

      - name: Clean up VAPID keys
        run: rm -f vapid_*.pem


  deploy:
    runs-on: ubuntu-latest
    needs: build-test-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set env vars per branch
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-backend" >> $GITHUB_ENV
            echo "SERVER_IP=${{ secrets.SERVER_IP_MASTER }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SSH_USER_MASTER }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.SSH_PRIVATE_KEY_MASTER }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-backend-dev" >> $GITHUB_ENV
            echo "SERVER_IP=${{ secrets.SERVER_IP_DEV }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SSH_USER_DEV }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.SSH_PRIVATE_KEY_DEV }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "stage" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-backend-stage" >> $GITHUB_ENV
            echo "SERVER_IP=${{ secrets.SERVER_IP_STAGE }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.SSH_USER_STAGE }}" >> $GITHUB_ENV
            echo "SSH_KEY=${{ secrets.SSH_PRIVATE_KEY_STAGE }}" >> $GITHUB_ENV
          fi
          echo "DEPLOY_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ env.SSH_KEY }}

      - name: Run Migrations & Pull Image
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "
            cd $DEPLOY_PATH &&
            docker pull $IMAGE_NAME:$DEPLOY_TAG &&
            docker run --rm \
              --network ok_network \
              -v \$(pwd):/app \
              $IMAGE_NAME:$DEPLOY_TAG \
              bash -c 'alembic upgrade head || echo \"No migrations run\"'
          "

      - name: Deploy Updated Containers
        run: |
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "
            cd $DEPLOY_PATH &&
            TAG=$DEPLOY_TAG docker compose up -d --build web
          "
