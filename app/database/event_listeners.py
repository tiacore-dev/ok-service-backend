import json
import time
from uuid import UUID
import logging
from base64 import urlsafe_b64encode
from sqlalchemy import event
from sqlalchemy.orm.attributes import get_history
from pywebpush import webpush, WebPushException
from cryptography.hazmat.primitives.serialization import load_pem_private_key
from config import Config


logger = logging.getLogger('ok_service')

config = Config()
ORIGIN = config.ORIGIN

# –ß—Ç–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞
with open("vapid_private_key.pem", "rb") as f:
    private_key = load_pem_private_key(f.read(), password=None)

VAPID_CLAIMS = {
    "sub": "mailto:your_email@example.com"
}

# ‚ö° –î–∏—Å–ø–µ—Ç—á–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_HANDLERS = {}


def notify_on_project_works_change(target, event_name):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ProjectWorks"""
    logger.info(
        f"[ProjectWorks] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (event: {event_name}): ID={target.project_work_id}")

    from app.database.managers.subscription_manager import SubscriptionsManager
    from app.database.managers.projects_managers import ProjectWorksManager

    db = SubscriptionsManager()
    project_manager = ProjectWorksManager()
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        link = f"https://{ORIGIN}/projects/{target.project}"

        if event_name == 'insert':
            # ‚ö° –û–±–Ω–æ–≤–ª—è–µ–º target –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info(
                f"[ProjectWorks] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {target.project_work_id}")

            user_id = project_manager.get_manager(target.project_work_id)
            if not user_id:
                logger.warning(
                    f"[ProjectWorks] –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è {target.project_work_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return

            subscription = db.filter_by(user=user_id)
            message_data = {
                "title": "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
                "body": f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å ID: {target.project_work_id}",
                "url": link
            }

        elif event_name == 'update':

            logger.info(
                f"[ProjectWorks] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {target.project_work_id}")

            history = get_history(target, "signed")
            logger.debug(f"[ProjectWorks] –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è signed: {history}")

            if history.has_changes and len(history.deleted) > 0 and len(history.added) > 0:
                if history.deleted[0] is False and history.added[0] is True:
                    user_id = project_manager.get_project_leader(
                        target.project_work_id)
                    if not user_id:
                        logger.warning(
                            f"[ProjectWorks] –ù–µ –Ω–∞–π–¥–µ–Ω project_leader –¥–ª—è {target.project_work_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                        return

                    subscription = db.filter_by(user=user_id)
                    message_data = {
                        "title": "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞",
                        "body": f"–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å ID: {target.project_work_id} –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞",
                        "url": link
                    }
            else:

                logger.debug(
                    f"[ProjectWorks] –ü–æ–ª–µ signed –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å False ‚Üí True. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
                return
        send_push_notification(subscription, message_data)

    except Exception as ex:
        logger.error(
            f"[ProjectWorks] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex}", exc_info=True)


def notify_on_shift_reports_change(target, event_name):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ShiftReports"""
    logger.info(
        f"[ShiftReports] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (event: {event_name}): ID={target.shift_report_id}")

    from app.database.managers.subscription_manager import SubscriptionsManager
    from app.database.managers.shift_reports_managers import ShiftReportsManager

    db = SubscriptionsManager()
    shift_manager = ShiftReportsManager()

    try:
        link = f"https://{ORIGIN}/shifts/{target.shift_report_id}"

        if event_name == 'insert':

            logger.info(
                f"[ShiftReports] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {target.shift_report_id}")

            user_id = shift_manager.get_project_leader(
                target.shift_report_id)

            if not user_id:
                logger.warning(
                    f"[ShiftReports] –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è {target.shift_report_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return

            subscription = db.filter_by(user=user_id)
            message_data = {
                "title": "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–º–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç",
                "body": f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–º–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç ID: {target.shift_report_id}",
                "url": link
            }

        elif event_name == 'update':
            logger.info(
                f"[ShiftReports] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {target.shift_report_id}")
            shift_report = shift_manager.get_by_id(
                target.shift_report_id)
            if shift_report:
                previous_signed = shift_report['signed']  # –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                current_signed = target.signed  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if previous_signed is False and current_signed is True:
                    user_id = getattr(target, 'user', None)
                    if not user_id:
                        logger.warning(
                            f"[ShiftReports] –ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è {target.shift_report_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                        return

                    subscription = db.filter_one_by_dict(user=UUID(user_id))
                    message_data = {
                        "title": "–°–º–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ–¥–ø–∏—Å–∞–Ω",
                        "body": f"–°–º–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç ID: {target.shift_report_id} –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω",
                        "url": link
                    }
                else:
                    logger.debug(
                        f"[ShiftReports] –ü–æ–ª–µ signed –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å False ‚Üí True. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")

        send_push_notification(subscription, message_data)

    except Exception as ex:
        logger.error(
            f"[ShiftReports] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex}", exc_info=True)


def notify_on_change(mapper, connection, target, event_name):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    table_name = target.__tablename__
    logger.info(
        f"[GLOBAL] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}, event={event_name}")
    # üî• –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π, —á—Ç–æ–±—ã –ë–î —É—Å–ø–µ–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    time.sleep(0.5)
    handler = NOTIFICATION_HANDLERS.get(table_name)
    if handler:
        handler(target, event_name)
    else:
        logger.warning(
            f"[GLOBAL] –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")


def send_push_notification(subscription_info, message_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ WebPush-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.debug(f"[WebPush] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {message_data}")

    try:
        subscription_info_corrected = {
            "endpoint": subscription_info["endpoint"],
            "keys": {
                "p256dh": subscription_info["p256dh"],
                "auth": subscription_info["auth"]
            }
        }
        webpush(
            subscription_info=json.loads(
                subscription_info_corrected['subscription_data']),
            data=json.dumps(message_data),
            vapid_private_key=urlsafe_b64encode(
                private_key.private_numbers().private_value.to_bytes(
                    length=(private_key.key_size + 7) // 8,
                    byteorder="big"
                )
            ).decode('utf-8'),
            vapid_claims=VAPID_CLAIMS
        )
        logger.info(f"[WebPush] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except WebPushException as ex:
        logger.error(f"[WebPush] –û—à–∏–±–∫–∞ WebPush: {str(ex)}", exc_info=True)
    except Exception as e:
        logger.error(f"[WebPush] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


# ‚ö° –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
NOTIFICATION_HANDLERS["project_works"] = notify_on_project_works_change
NOTIFICATION_HANDLERS["shift_reports"] = notify_on_shift_reports_change


def setup_listeners():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º notify_on_change()"""
    from app.database.models import ProjectWorks, ShiftReports

    logger.info("[GLOBAL] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π")
    try:
        def delayed_notify(m, c, t, event_name):
            """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º notify_on_change()"""
            time.sleep(0.5)  # üî• –î–∞–µ–º –≤—Ä–µ–º—è –ë–î –Ω–∞ –∫–æ–º–º–∏—Ç
            notify_on_change(m, c, t, event_name)

        event.listen(ProjectWorks, 'after_insert', lambda m,
                     c, t: delayed_notify(m, c, t, "insert"))
        event.listen(ProjectWorks, 'after_update', lambda m,
                     c, t: delayed_notify(m, c, t, "update"))
        event.listen(ShiftReports, 'after_insert', lambda m,
                     c, t: delayed_notify(m, c, t, "insert"))
        event.listen(ShiftReports, 'after_update', lambda m,
                     c, t: delayed_notify(m, c, t, "update"))

        logger.info("[GLOBAL] –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
    except Exception as e:
        logger.error(
            f"[GLOBAL] –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
