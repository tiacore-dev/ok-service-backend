import logging
from sqlalchemy.orm import joinedload
from sqlalchemy import asc, desc
from app.database.models import Works, WorkPrices, WorkCategories
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ BaseDBManager –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ
from app.database.managers.abstract_manager import BaseDBManager

logger = logging.getLogger('ok_service')


class WorksManager(BaseDBManager):

    @property
    def model(self):
        return Works

    def get_all_filtered(self, offset=0, limit=None, sort_by=None, sort_order='asc', **filters):
        logger.debug("get_all_filtered –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.",
                     extra={"login": "database"})

        with self.session_scope() as session:
            query = session.query(self.model).options(joinedload(
                self.model.work_category))  # üî• –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            for key, value in filters.items():
                if value is not None and hasattr(self.model, key):
                    column = getattr(self.model, key)
                    query = query.filter(column == value)
                    logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä: {key} = {value}",
                                 extra={'login': 'database'})

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            if sort_by and hasattr(self.model, sort_by):
                order = desc if sort_order == 'desc' else asc  # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                query = query.order_by(order(getattr(self.model, sort_by)))
                logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: {sort_by} {sort_order}",
                             extra={"login": "database"})

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            if offset:
                query = query.offset(offset)
                logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ: offset = {offset}",
                             extra={"login": "database"})
            if limit:
                query = query.limit(limit)
                logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç: limit = {limit}",
                             extra={"login": "database"})

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
            records = query.all()
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}",
                         extra={"login": "database"})

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
            return [record.to_dict() for record in records]


class WorkPricesManager(BaseDBManager):

    @property
    def model(self):
        return WorkPrices


class WorkCategoriesManager(BaseDBManager):

    @property
    def model(self):
        return WorkCategories
