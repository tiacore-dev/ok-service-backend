import logging
import uuid
from decimal import Decimal
from uuid import UUID
from sqlalchemy.orm import joinedload
from sqlalchemy import and_, asc, desc
from app.database.models import Projects, ProjectSchedules, ProjectWorks, Objects, ShiftReportDetails, ShiftReports
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ BaseDBManager –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ
from app.database.managers.abstract_manager import BaseDBManager

logger = logging.getLogger('ok_service')

EXACT_MATCH_FIELDS = {"status"}


class ProjectsManager(BaseDBManager):

    @property
    def model(self):
        return Projects

    def get_all_filtered_with_status(self, user, offset=0, limit=None, sort_by=None, sort_order='asc', **filters):
        logger.debug("get_all_filtered_with_status –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ –æ–±—ä–µ–∫—Ç–∞.",
                     extra={"login": "database"})

        with self.session_scope() as session:
            query = session.query(self.model).options(joinedload(
                Projects.objects))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinload –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–±—ã—á–Ω—ã–π "user", —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—ä–µ–∫—Ç–∞
            if user['role'] == "user":
                query = query.join(Objects, Projects.object == Objects.object_id).filter(
                    Objects.status == "active")
                logger.debug("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'active'.",
                             extra={"login": "database"})
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ filters
            filter_conditions = []
            for key, value in filters.items():
                if value is not None and hasattr(self.model, key):
                    column = getattr(self.model, key)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ UUID (–æ–±—ã—á–Ω–æ 36 —Å–∏–º–≤–æ–ª–æ–≤)
                    if isinstance(value, uuid.UUID) or (isinstance(value, str) and len(value) == 36 and '-' in value):
                        filter_conditions.append(column == value)
                        logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω—ã–π UUID-—Ñ–∏–ª—å—Ç—Ä: {key} = {value}",
                                     extra={'login': 'database'})

                    # –ü–æ–ª—è, —Ç—Ä–µ–±—É—é—â–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    elif key in EXACT_MATCH_FIELDS:
                        filter_conditions.append(column == value)
                        logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è {key}: {key} = {value}",
                                     extra={'login': 'database'})

                    elif isinstance(value, str):
                        value = value.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                        if "%" not in value:
                            # –î–æ–±–∞–≤–ª—è–µ–º wildcard –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            value = f"%{value}%"

                        filter_conditions.append(column.ilike(value))
                        logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º ILIKE-—Ñ–∏–ª—å—Ç—Ä: {key} LIKE {value}",
                                     extra={'login': 'database'})

                    else:
                        filter_conditions.append(column == value)
                        logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä: {key} = {value}",
                                     extra={'login': 'database'})

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å
            if filter_conditions:
                query = query.filter(and_(*filter_conditions))

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            if sort_by and hasattr(self.model, sort_by):
                order = desc if sort_order == 'desc' else asc
                query = query.order_by(order(getattr(self.model, sort_by)))
                logger.debug(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É: {sort_by} {sort_order}",
                             extra={"login": "database"})

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            if offset:
                query = query.offset(offset)
            if limit:
                query = query.limit(limit)

            records = query.all()
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}",
                         extra={"login": "database"})

            return [record.to_dict() for record in records]

    def get_projects_by_leader(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ä–∞–±–æ–º."""
        try:
            logger.debug(f"Fetching projects for project leader: {user_id}",
                         extra={"login": "database"})

            with self.session_scope() as session:
                projects = session.query(Projects).filter(
                    Projects.project_leader == user_id
                ).all()

                result = [project.to_dict() for project in projects]

                logger.info(f"Found {len(result)} projects for project leader {user_id}",
                            extra={"login": "database"})

                return result

        except Exception as e:
            logger.error(f"Error fetching projects for leader {user_id}: {e}",
                         extra={"login": "database"})
            return []

    def get_project_stats(self, project_id):
        try:
            logger.debug(f"Fetching project for project id: {project_id}",
                         extra={"login": "database"})

            with self.session_scope() as session:
                # project = session.query(Projects).filter(
                #     Projects.project_id == project_id).first()
                project_works = session.query(ProjectWorks).filter(
                    ProjectWorks.project == project_id
                ).all()
                result = {
                    str(work.work): {"project_work_quantity": 0, "shift_report_details_quantity": 0}
                    for work in project_works
                }
                project_works = [work.to_dict() for work in project_works]
                for work in project_works:
                    result[work['work']
                           ]["project_work_quantity"] += work['quantity']
                reports = session.query(ShiftReports).filter(
                    ShiftReports.project == project_id, ShiftReports.signed is True
                ).all()
                report = [report.to_dict() for report in reports]
                for report in reports:
                    details = session.queryS(ShiftReportDetails).filter(
                        ShiftReportDetails.shift_report == UUID(
                            report['shift_report_id'])
                    ).all()
                    details = [detail.to_dict() for detail in details]
                    for detail in details:
                        result[detail['work']
                               ]["shift_report_details_quantity"] += detail['quantity']
                return result
        except Exception as e:
            logger.error(f"Error fetching projects for leader {project_id}: {e}",
                         extra={"login": "database"})
            return {}


class ProjectSchedulesManager(BaseDBManager):

    @property
    def model(self):
        return ProjectSchedules

    def get_schedule_ids_by_project_leader(self, user_id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤—Å–µ—Ö ProjectWorks, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è project_leader.
        """
        with self.session_scope() as session:
            schedule_ids = session.query(ProjectSchedules.project_schedule_id).join(
                Projects, ProjectSchedules.project == Projects.project_id
            ).filter(
                Projects.project_leader == UUID(user_id)
            ).all()

            # ‚úÖ –î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ tuple
            result = [str(schedule_id[0]) for schedule_id in schedule_ids]
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(result)} —Ä–∞–±–æ—Ç –¥–ª—è project_leader={user_id}",
                         extra={"login": "database"})
            return result


class ProjectWorksManager(BaseDBManager):

    @property
    def model(self):
        return ProjectWorks

    def get_work_ids_by_project_leader(self, user_id):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –≤—Å–µ—Ö ProjectWorks, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è project_leader.
        """
        with self.session_scope() as session:
            work_ids = session.query(ProjectWorks.project_work_id).join(
                Projects, ProjectWorks.project == Projects.project_id
            ).filter(
                Projects.project_leader == UUID(user_id)
            ).all()

            # ‚úÖ –î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ tuple
            result = [str(work_id[0]) for work_id in work_ids]
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(result)} —Ä–∞–±–æ—Ç –¥–ª—è project_leader={user_id}",
                         extra={"login": "database"})
            return result

    def get_manager(self, project):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ project"""
        try:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ manager ID –¥–ª—è project: {project}", extra={
                         "login": "database"})

            with self.session_scope() as session:
                # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º Projects –∏ Objects —á–µ—Ä–µ–∑ Projects
                project_data = session.query(Projects).options(
                    # –¢–µ–ø–µ—Ä—å objects –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Projects
                    joinedload(Projects.objects)
                ).filter(Projects.project_id == project).first()

                if not project_data or not project_data.objects:
                    logger.warning(f"–ü—Ä–æ–µ–∫—Ç {project} –∏–ª–∏ –µ–≥–æ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", extra={
                                   "login": "database"})
                    return None

                manager_id = project_data.objects.manager  # üî• –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if not manager_id:
                    logger.warning(f"–£ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project} –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞", extra={
                                   "login": "database"})
                    return None

                logger.info(f"–ù–∞–π–¥–µ–Ω manager ID {manager_id} –¥–ª—è project {project}", extra={
                            "login": "database"})
                return str(manager_id)  # –ü—Ä–∏–≤–æ–¥–∏–º UUID –∫ —Å—Ç—Ä–æ–∫–µ

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ manager ID: {e}", extra={
                         "login": "database"})
            raise

    def get_project_leader(self, project_work_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ project_work_id"""
        try:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ project_leader ID –¥–ª—è project_work_id: {project_work_id}", extra={
                         "login": "database"})

            with self.session_scope() as session:
                project_work = session.query(self.model).options(
                    joinedload(self.model.projects)
                ).filter(self.model.project_work_id == project_work_id).first()

                if not project_work or not project_work.projects:
                    logger.warning(f"ProjectWork —Å ID {project_work_id} –∏–ª–∏ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", extra={
                                   "login": "database"})
                    return None

                project_leader = project_work.projects.project_leader
                if not project_leader:
                    logger.warning(f"–£ –ø—Ä–æ–µ–∫—Ç–∞ ProjectWork {project_work_id} –Ω–µ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", extra={
                                   "login": "database"})
                    return None

                logger.info(f"–ù–∞–π–¥–µ–Ω project_leader ID {project_leader} –¥–ª—è project_work_id {project_work_id}", extra={
                            "login": "database"})
                return str(project_leader)  # –ü—Ä–∏–≤–æ–¥–∏–º UUID –∫ —Å—Ç—Ä–æ–∫–µ

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ project_leader ID: {e}", extra={
                         "login": "database"})
            raise
