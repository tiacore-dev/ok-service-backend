from flask_restx import fields, Model
from marshmallow import Schema, fields as ma_fields

# üîπ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
registered_models = {}

# üîπ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤
type_mapping = {
    ma_fields.String: fields.String,
    ma_fields.Integer: fields.Integer,
    ma_fields.Float: fields.Float,
    ma_fields.Boolean: fields.Boolean,
    ma_fields.UUID: fields.String,  # UUID —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    # Dict –º–∞–ø–ø–∏—Ç—Å—è –≤ Raw (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–∏–ø Flask-RESTx)
    ma_fields.Dict: fields.Raw,

}


def map_field(field_obj):
    """–§—É–Ω–∫—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ —Ç–∏–ø–æ–≤ Marshmallow ‚Üí Flask-RESTx"""
    field_type = type(field_obj)

    if field_type == ma_fields.List:
        inner_type = map_field(field_obj.inner)
        return fields.List(inner_type)

    if field_type == ma_fields.Nested:
        nested_schema = field_obj.nested

        if isinstance(nested_schema, type) and issubclass(nested_schema, Schema):
            nested_schema = nested_schema()

        # üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ï–î–ò–ù–û–ï –∏–º—è –º–æ–¥–µ–ª–∏
        nested_model_name = nested_schema.__class__.__name__.replace(
            "Schema", "")

        # ‚úÖ –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ!
        if nested_model_name in registered_models:
            # print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {
            #      nested_model_name}")
            return fields.Nested(registered_models[nested_model_name])

        # ‚ùóÔ∏è –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        nested_model = generate_swagger_model(nested_schema, nested_model_name)
        return fields.Nested(nested_model)

    return type_mapping.get(field_type, fields.String)()


def generate_swagger_model(schema: Schema, name: str) -> Model:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Flask-RESTx Model –∏–∑ Marshmallow Schema"""

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–ª–∞—Å—Å, —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    if isinstance(schema, type) and issubclass(schema, Schema):
        schema = schema()

    # üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò–º—è –º–æ–¥–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –±–µ–∑ "Schema"
    fixed_name = name.replace("Schema", "")

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ
    if fixed_name in registered_models:
        # print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {fixed_name}")
        return registered_models[fixed_name]

    model_fields = {}

    for field_name, field_obj in schema.fields.items():
        model_fields[field_name] = map_field(field_obj)

    model = Model(fixed_name, model_fields)
    registered_models[fixed_name] = model  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä
    # print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å {fixed_name} —Å –ø–æ–ª—è–º–∏: {
    #      list(model_fields.keys())}")

    return model
